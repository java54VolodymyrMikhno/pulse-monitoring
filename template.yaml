AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Streams DynamoDB table changes to EventBridge (uksb-1tthgi812) (tag:dynamodb-eventbridge-java)
Globals:
  Function:
    Handler: telran.pulse.monitoring.App::handleRequest
    Runtime: java17
    Architectures:
      - x86_64
    Timeout: 30
    MemorySize: 512
    Environment:
      Variables:
        LOGGER_LEVEL: FINEST
    
      

Resources:
  #DynamoDB Streams specification
  PulseValuesStream:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: pulse_values
      AttributeDefinitions:
        - AttributeName: patientId
          AttributeType: N
        - AttributeName: timestamp
          AttributeType: N
      KeySchema:
        - AttributeName: patientId
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
          StreamViewType: NEW_IMAGE
  PulseAbnormalValuesStream:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: pulse_abnormal_values
      AttributeDefinitions:
        - AttributeName: patientId
          AttributeType: N
        - AttributeName: timestamp
          AttributeType: N
      KeySchema:
        - AttributeName: patientId
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
          StreamViewType: NEW_IMAGE
         
  PulseJumpValuesStream:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: pulse_jumps_values
      AttributeDefinitions:
        - AttributeName: patientId
          AttributeType: N
        - AttributeName: timestamp
          AttributeType: N
      KeySchema:
        - AttributeName: patientId
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
          StreamViewType: NEW_IMAGE
  PulseLastValues:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: last_pulse_values
      AttributeDefinitions:
        - AttributeName: patientId
          AttributeType: N
        
      KeySchema:
        - AttributeName: patientId
          KeyType: HASH
       
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5       
  #SNS Topic for Abnormal pulse values notifications
  AbnormalValuesSNS:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: AbnormalValuesTopic
      Subscription:
        - Protocol: email
          Endpoint: yuriaws25@gmail.com
        
  # lambda function for pulse jumps finding out
  PulseJumpAnalyzer:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: pulse-jump-analyzer
      
      Policies:
        - Statement:
          - Effect: Allow
            Resource: '*'
            Action:
              - dynamodb:*
      Events:
        TableRecordChange:
          Type: DynamoDB
          Properties:
            StartingPosition: LATEST
            Stream: !GetAtt PulseValuesStream.StreamArn
            FilterCriteria: 
              Filters: 
              - Pattern: '{"eventName": ["INSERT"]}'        
# Define the publisher Lambda function with permissions
  PulseValuesAnalyzer:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: pulse-values-analyzer
      Policies:
        - Statement:
          - Effect: Allow
            Resource: '*'
            Action:
              - dynamodb:*  
      Environment:
        Variables:
          BASE_URL:  !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/range"       
      Events:
        TableRecordChange:
          Type: DynamoDB
          Properties:
            StartingPosition: LATEST
            Stream: !GetAtt PulseValuesStream.StreamArn
            FilterCriteria: 
              Filters: 
              - Pattern: '{"eventName": ["INSERT"]}'      
  RangeProviderFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: range-provider
      Events:
        GetRange:
          Type: Api 
          Properties:
            Path: /range
            Method: get
  # Lambda for abnormal pulse valuse notification 
  AbnormalValuesNotifier:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: abnormal-values-notifier
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt AbnormalValuesSNS.TopicName
      Environment:
        Variables:
          TOPIC_ARN: !Ref AbnormalValuesSNS
          REGION: !Sub ${AWS::Region} 
      Events:
        TableRecordChange:
          Type: DynamoDB
          Properties:
            StartingPosition: LATEST
            Stream: !GetAtt PulseAbnormalValuesStream.StreamArn
            FilterCriteria: 
              Filters: 
              - Pattern: '{"eventName": ["INSERT"]}'         
Outputs:
  RangeProviderApi:
    Description: "API Gateway endpoint URL for Prod stage for Range Provider function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/range"